AWSTemplateFormatVersion: 2010-09-09
Description: Ec2 instance for cadabra project

Parameters: 
  InstanceType:
    Description: WebServer EC2 instance type (has default, AllowedValues)
    Type: String
    Default: t2.small
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
    ConstraintDescription: must be a valid EC2 instance type.
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances. Linked to AWS Parameter
    Type: AWS::EC2::KeyPair::KeyName
    Default: "cloudformation"
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})"
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  AWSRegionArch2AMI:
    us-east-1: 
        HVM64: ami-032930428bf1abbff
    us-east-2: 
        HVM64: ami-027cab9a7bf0155df
    us-west-1: 
        HVM64: ami-088c153f74339f34c
    us-west-2: 
        HVM64: ami-01fee56b22f308154

Resources: 
  # Ec2 resourece 
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      KeyName: !Ref KeyName
      ImageId: !FindInMap  [AWSRegionArch2AMI, !Ref 'AWS::Region', HVM64]
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref RootInstanceProfile
      SecurityGroups: [!Ref 'InstanceSecurityGroup']
      Tags:
        - Key: Environment
          Value: CadabraProject
      UserData:
        Fn::Base64: | 
          #!/bin/bash
          sudo yum install -y aws-kinesis-agent 
          wget http://media.sundog-soft.com/AWSBigData/LogGenerator.zip  
          unzip LogGenerator.zip 
          chmod a+x LogGenerator.py 
          sudo mkdir /var/log/cadabra
          wget http://media.sundog-soft.com/AWSBigData/httpd.zip
          unzip httpd.zip
          sudo mv httpd /var/log/httpd 
  
  # We need to move this into separate template 
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "SSH access"
      SecurityGroupIngress:
      - CidrIp: !Ref SSHLocation
        FromPort: '22'
        IpProtocol: tcp
        ToPort: '22'

  # We need to spearate this IAM role into nested tempalte 
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: "Ec2IamRole"
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Principal: 
              Service: 
                - "ec2.amazonaws.com"
            Action: 
              - "sts:AssumeRole"
      Path: "/"

  IAMrolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Effect: "Allow"
            Action: "*"
            Resource: "*"
      PolicyName: "Administrator" 
      Roles: 
        - !Ref IAMRole

  RootInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: '/'
      Roles: 
        - !Ref IAMRole

Outputs:
  InstanceId:
    Description: InstanceId of the newly created EC2 instance
    Value: !Ref 'EC2Instance'