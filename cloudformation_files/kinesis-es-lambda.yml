AWSTemplateFormatVersion: 2010-09-09
Description: |
  Cloudformation Template for lambda in kineis-firehose to elasticsearch workflow in cadabra project
  
Parameters:
  KinesisFirehoseDeliveryStreamESLambdaIAMRoleName:
    Type: String 
    Default : KinesisFireshoseESearchDeliveryLambdaIamRole
  KinesisFireshoseLambdaName: 
    Type : String 
    Default: LogTransform
  LambdaRuntime: 
    Type: String 
    Default: nodejs10.x
Resources:
  KinesisESLambdIAMrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref KinesisFirehoseDeliveryStreamESLambdaIAMRoleName
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: ''
            Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      

  KinesisESLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref KinesisFireshoseLambdaName
      Description: Lambda function to process kinesis firehose delivery stream 
      Handler: index.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${KinesisFirehoseDeliveryStreamESLambdaIAMRoleName} 
      Runtime: !Ref LambdaRuntime
      Timeout: 300
      Code: 
        ZipFile: |
          'use strict';
          console.log('Loading function');

          /* Apache Log format parser */
          const parser = /^([\d.]+) (\S+) (\S+) \[([\w:/]+)(\s[\+\-]\d{4}){0,1}\] "(.+?)" (\d{3}) (\d+)/;

          exports.lambda_handler = (event, context, callback) => {
              let success = 0; // Number of valid entries found
              let failure = 0; // Number of invalid entries found

              /* Process the list of records and transform them */
              const output = event.records.map((record) => {
                  const entry = (Buffer.from(record.data, 'base64')).toString('utf8');
                  const match = parser.exec(entry);
                  if (match) {
                      /* Prepare JSON version from Apache log data */
                      const safeStringToInt = (strVal) => {
                          if (isNaN(Number(strVal))) {
                              return strVal;
                          } else {
                              return Number(strVal);
                          }
                      };
                      const formatDate = (strVal) => strVal.replace(/\//g, ' ').replace(':', ' ');

                      const result = {
                          host: match[1],
                          ident: match[2],
                          authuser: match[3],
                          request: match[6],
                          response: safeStringToInt(match[7]),
                          bytes: safeStringToInt(match[8]),
                      };

                      if (match[6] && match[6].split(' ').length > 1) {
                          result.verb = match[6].split(' ')[0];
                      }

                      let isoTs = match[4];
                      try {
                          isoTs = new Date(formatDate(isoTs)).toISOString();
                      } catch (err) {
                          console.log('Parsing the timestamp to date failed.');
                      }
                      result['@timestamp'] = isoTs;

                      if (match[5]) {
                          const timezone = match[5].trim();
                          result.timezone = timezone;
                          try {
                              const ts = formatDate(match[4]);
                              const combinedTs = `${ts} ${timezone}`;
                              result['@timestamp_utc'] = new Date(combinedTs).toISOString();
                          } catch (err) {
                              console.log('Calculating UTC time failed.');
                          }
                      }

                      const payload = (Buffer.from(JSON.stringify(result), 'utf8')).toString('base64');
                      success++;
                      return {
                          recordId: record.recordId,
                          result: 'Ok',
                          data: payload,
                      };
                  } else {
                      /* Failed event, notify the error and leave the record intact */
                      failure++;
                      return {
                          recordId: record.recordId,
                          result: 'ProcessingFailed',
                          data: record.data,
                      };
                  }
              });
              console.log(`Processing completed.  Successful records ${success}, Failed records ${failure}.`);
              callback(null, { records: output });
          };
Outputs:
  KinesisESLambdaArn:
      Description: The ARN of the kinesis stream 
      Value: !GetAtt KinesisESLambda.Arn
  